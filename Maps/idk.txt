//CSCI 115 Project, Abdulaziz Al-Said, Dr. Cecotti, M W F 9-950am
#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <cmath>
#include <fstream>
#include <sstream>
#include<iomanip>
#include "Project.h"
//using namespace std;

int mRow[] = { -1, 0, 1 ,0 };
int mCol[] = { 0, 1 ,0, -1 };

Player::Player()
{
	position.x = NULL;
	position.y = NULL;
	p = 3;
	active = false;
	cType = " ";
}

Player::Player(string name)
{
	position.x = NULL;
	position.y = NULL;
	p = 3;
	active = false;
	cType = name;

}

Player::~Player()
{
}

void Player::Move(char m, Graph g, Player curr) {
	
	g.M[curr.position.x][curr.position.y] = curr.p;
	if (m == 'w') {
		curr.position.x--;
	}
	if (m == 'a') {
		curr.position.y--;
	}
	if (m == 's') {
		curr.position.x++;
	}
	if (m == 'd') {
		curr.position.y++;
	}
	curr.p = g.M[curr.position.x][curr.position.y];
	g.M[curr.position.x][curr.position.y] = 1;
	g.Display();
}

/*void Player::Move2(Graph g, Player one, Player two) {
	bool finish = false;
	while (!finish)
	{
		char input;
		cin >> input;
		switch (input)
		{
		case 'b': 
			finish = true; 
			break;
		case '1': 
			active = true;
			two.active = false;
			break;
		case '2':
			two.active = true;
			active = false;
			break;
		}
		if (one.active == true) {
			switch (input)
			{
			case 'b':
				finish = true;
				break;
			case '1':
				active = true;
				two.active = false;
				break;
			case '2':
				two.active = true;
				active = false;
				break;
			}
			
		}
		if (two.active == true) {

		}
	}

}
void Player::Move3(char m, Graph g, Player one, Player two, Player three) {

	bool finish = false;
	while (!finish)
	{
		char input;
		cin >> input;
		switch (input)
		{
		case 'q':
			finish = true;
			break;
		case '1':
			three.active = false;
			two.active = false;
			one.active = true;
			break;
		case '2':
			three.active = false;
			two.active = true;
			one.active = false;
			break;
		case '3':
			three.active = true;
			two.active = false;
			one.active = false;
			break;
		}

	}
}
*/

Graph::Graph(string s) {
	readMatrix(s);
	
	vis = new bool* [R];
	myArray = new int* [R];

	for (int i = 0; i < R; i++){
		myArray[i] = new int[C];
		vis[i] = new bool[C];
	}

	
	
}

Graph::~Graph() {
	// Free memory
	for (int i = 0; i < R; i++)
		delete[] M[i];
	for (int i = 0; i < R; i++)
		delete[] vis[i];
	for (int i = 0; i < R; i++)
		delete[] myArray[i];

	delete[] M;
	delete[] vis;
	delete[] myArray; 
}

void Graph::Display()
{
	int i, j;
	for (i = 0; i < R; i++)
	{
		for (j = 0; j < C; j++)
		{
			char c = ' ';
			switch (M[i][j])
			{
				case 0://destination or goal
					c = 'x'; 
					break; 
				case 1://player
					c = 'o';
					break;
				case 2://forest
					c = 't';
					break;
				case 3://plains
					c = '-'; 
					break;
				case 4: //tunnel or teleporter
					c = '@'; 
					break;
				case 5: //mountain
					c = '^';
					break;
				case 6: //desert
					c = '~';
					break;
				case 7: //swamp
					c = 'w'; 
					break;
			}

			cout <<setw(2) << c; 
		}
		cout << endl;
	}
}

bool Graph::isValid(int row, int col)
{
	if (row < 0 || col < 0 || col >= C || row >=R) {
		return false;
	}
	if (vis[row][col]) {
		return false;
	}
	
	return true;
}

int** Graph::BFS(Coord start, Coord goal) {
	queue<Coord> q;
	int x, y;
	int a = 0;
	int b = 0;

	q.push(start);
 	vis[start.x][start.y] = true;
	
	while (!q.empty()) {
		Coord d = q.front();
		x = d.x;
		y = d.y;
		myArray[a][b] = M[x][y];
		
		if (b == C) {
			a++;
			b = -1;
		}
		b++;
		q.pop();
	

		for (int i = 0; i < 4; i++) {
			int adjx = x + mRow[i];
			int adjy = y + mCol[i];

			if(isValid(adjx, adjy)){
				Coord t;
				t.x = adjx;
				t.y = adjy;
				q.push(t);
				vis[adjx][adjy] = true;
			}

		}
	}
	Display();

	return myArray;
}

int** Graph::DFS(Coord start, Coord goal) {
	stack<Coord> st;
	int x, y;
	int a = 0;
	int b = 0;

	st.push(start);

	while (!st.empty()) {
		Coord s = st.top();
		st.pop();
		x = s.x;
		y = s.y;
		
		if (!isValid(x, y)) {
			continue;
		}
		
		vis[x][y] = true;
		myArray[a][b] = M[x][y];

		if (b == C) {
			a++;
			b = -1;
		}
		b++;

		for (int i = 0; i < 4; i++) {
			int adjx = x + mRow[i];
			int adjy = y + mCol[i]; 
			Coord t;
			t.x = adjx;
			t.y = adjy;
			st.push(t);
		}

	}
	Display();
	return myArray;
}

void Graph::readMatrix(string s) {
	
	ifstream file;
	file.open(s);
	//int LENGTH = 20;
	int size;
	string str;

	getline(file, str);
	if (str.substr(0, 2) == "r ") {
		istringstream r(str.substr(1));
		r >> size;
		R = size;
		cout << "Row size is: " << R << endl;
	}
	getline(file, str);
	if (str.substr(0, 2) == "c ") {
		istringstream c(str.substr(1));
		c >> size;
		C = size;
		cout << "Column size is: " << C << endl;;
	}

	M = new int* [R];
	for (int i = 0; i < R; i++) {
		M[i] = new int[C];
	}

		getline(file, str);
		if (str.substr(0, 3) == "M: ") {
			istringstream m(str.substr(1));

			for (int i = 0; i < R; i++) {
				for (int j = 0; j < C; j++) {
					m >> M[i][j];
				}
			}
			
		}
	

	cout << "Your map is: " << endl;
	Display();
	file.close();

}

int main() {
	char c;
	int cnum;
	string cname;
	string cname2;
	string file = "map";
	Player one;
	Player two;
	Player three;
	Coord S = { 0,0 };
	Coord D = { 3,3 };

	cout << "CSci 115 - Project" << endl << endl;
	cout << "How many characters do you want to play with? Choose 1-3: ";
	cin >> cnum;
restart: 
	if (cnum == 1) {
		file = "map1-";
		cout << "Enter map number :): ";
		cin >> c;

		cout << "Choose your character! Tourist, Hiker, or Bogmaster!";
		cin >> cname;
		one.cType = cname;

	}
	if (cnum == 2) {
		file = "map2-";
		cout << "Enter map number :): ";
		cin >> c;

		cout << "Choose two characters! Tourist, Hiker, or Bogmaster!";
		cin >> cname;
		one.cType = cname;
		cin >> cname2;
		two.cType = cname2;

	}
	if (cnum == 3) {
		file = "map3-";
		cout << "Enter map number :): ";
		cin >> c;
		one.cType = "Tourist";
		two.cType = "Hiker";
		three.cType = "Bogmaster";

	}
	else{
		cout << "Incorrect input! Please try again!";
		goto restart;
	}


	file += c;
	file = file + ".txt";
	Graph myGame(file);

	

		bool finish = false;

		while (!finish)
		{
			char input;
			cin >> input;
			system("cls"); // clear the commandline (to refresh the screen)
			switch (input)
			{
			case 'q': finish = true; break;
			case 'w': 
			case '1':; break;
			case '2':; break;
			case '3':; break;
			case '4':; break;
			case '5':; break;


			}
		}
	
	
}
